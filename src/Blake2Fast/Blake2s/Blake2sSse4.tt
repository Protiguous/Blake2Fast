<#@ template language="C#" debug="false" hostspecific="false" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
//	<auto-generated>
//		This code was generated from a template.
//		Manual changes will be overwritten if the code is regenerated.
//	</auto-generated>
//------------------------------------------------------------------------------

#if HWINTRINSICS
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Blake2Fast.Implementation
{
#if BLAKE2_PUBLIC
	public
#else
	internal
#endif
	unsafe partial struct Blake2sHashState
	{
		// SIMD algorithm described in https://eprint.iacr.org/2012/275.pdf
		[MethodImpl(MethodImplOptions.AggressiveOptimization)]
		private static void mixSse41(uint* sh, uint* m)
		{
			ref byte rrm = ref MemoryMarshal.GetReference(rormask);
			var r16 = Unsafe.As<byte, Vector128<byte>>(ref rrm);
			var r8  = Unsafe.As<byte, Vector128<byte>>(ref Unsafe.Add(ref rrm, Vector128<byte>.Count));

			var row1 = Sse2.LoadVector128(sh);
			var row2 = Sse2.LoadVector128(sh + 4);

			ref byte riv = ref MemoryMarshal.GetReference(ivle);
			var row3 = Unsafe.As<byte, Vector128<uint>>(ref riv);
			var row4 = Unsafe.As<byte, Vector128<uint>>(ref Unsafe.Add(ref riv, 16));

			row4 = Sse2.Xor(row4, Sse2.LoadVector128(sh + 8)); // t[] and f[]

			var m0 = Sse2.LoadVector128(m);
			var m1 = Sse2.LoadVector128(m + 4);
			var m2 = Sse2.LoadVector128(m + 8);
			var m3 = Sse2.LoadVector128(m + 12);

<#
for (int i = 0; i < 10; i++) {
	WriteLine($"\t\t\t//ROUND {i+1}");
	loadcode(i, 0);
	g1();
	loadcode(i, 1);
	g2();
	diagonalize();

	loadcode(i, 2);
	g1();
	loadcode(i, 3);
	g2();
	undiagonalize();
}
#>
			row1 = Sse2.Xor(row1, row3);
			row2 = Sse2.Xor(row2, row4);
			row1 = Sse2.Xor(row1, Sse2.LoadVector128(sh));
			row2 = Sse2.Xor(row2, Sse2.LoadVector128(sh + 4));
			Sse2.Store(sh, row1);
			Sse2.Store(sh + 4, row2);
		}
	}
}
#endif
<#+

void diagonalize() {
#>
			//DIAGONALIZE
			row1 = Sse2.Shuffle(row1, 0b_10_01_00_11);
			row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
			row3 = Sse2.Shuffle(row3, 0b_00_11_10_01);

<#+
}

void undiagonalize() {
#>
			//UNDIAGONALIZE
			row1 = Sse2.Shuffle(row1, 0b_00_11_10_01);
			row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
			row3 = Sse2.Shuffle(row3, 0b_10_01_00_11);

<#+
}

void g1() {
#>

			//G1
			row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
			row4 = Sse2.Xor(row4, row1);
			row4 = Ssse3.Shuffle(row4.AsByte(), r16).AsUInt32();

			row3 = Sse2.Add(row3, row4);
			row2 = Sse2.Xor(row2, row3);
			row2 = Sse2.Xor(Sse2.ShiftRightLogical(row2, 12), Sse2.ShiftLeftLogical(row2, 32 - 12));

<#+
}

void g2() {
#>

			//G2
			row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
			row4 = Sse2.Xor(row4, row1);
			row4 = Ssse3.Shuffle(row4.AsByte(), r8).AsUInt32();

			row3 = Sse2.Add(row3, row4);
			row2 = Sse2.Xor(row2, row3);
			row2 = Sse2.Xor(Sse2.ShiftRightLogical(row2, 7), Sse2.ShiftLeftLogical(row2, 32 - 7));

<#+
}

void loadcode(int round, int part) {
	int r = round % 10 * 10 + part;
	switch (r) {
		case 0:
#>
			<#= round == 0 ? "var " : "" #>b0 = Sse.Shuffle(m0.AsSingle(), m1.AsSingle(), 0b_10_00_10_00).AsUInt32();
<#+
			break;
		case 1:
#>
			b0 = Sse.Shuffle(m0.AsSingle(), m1.AsSingle(), 0b_11_01_11_01).AsUInt32();
<#+
			break;
		case 2:
#>
			var t0 = Sse2.Shuffle(m2, 0b_11_10_00_01);
			var t1 = Sse2.Shuffle(m3, 0b_00_01_11_10);
			b0 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_11_00_00_11).AsUInt32();
<#+
			break;
		case 3:
#>
			t0 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_00_11_11_00).AsUInt32();
			b0 = Sse2.Shuffle(t0, 0b_10_11_00_01);
<#+
			break;
		case 10:
#>
			t0 = Sse41.Blend(m1.AsUInt16(), m2.AsUInt16(), 0b_00_00_11_00).AsUInt32();
			t1 = Sse2.ShiftLeftLogical128BitLane(m3, 4);
			var t2 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_11_11_00_00).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_10_01_00_11);
<#+
			break;
		case 11:
#>
			t0 = Sse2.Shuffle(m2, 0b_00_00_10_00);
			t1 = Sse41.Blend(m1.AsUInt16(), m3.AsUInt16(), 0b_11_00_00_00).AsUInt32();
			t2 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_11_11_00_00).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_10_11_00_01);
<#+
			break;
		case 12:
#>
			t0 = Sse2.ShiftLeftLogical128BitLane(m1, 4);
			t1 = Sse41.Blend(m2.AsUInt16(), t0.AsUInt16(), 0b_00_11_00_00).AsUInt32();
			t2 = Sse41.Blend(m0.AsUInt16(), t1.AsUInt16(), 0b_11_11_00_00).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_11_00_01_10);
<#+
			break;
		case 13:
#>
			t0 = Sse2.UnpackHigh(m0, m1);
			t1 = Sse2.ShiftLeftLogical128BitLane(m3, 4);
			t2 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_00_00_11_00).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_11_00_01_10);
<#+
			break;
		case 20:
#>
			t0 = Sse2.UnpackHigh(m2, m3);
			t1 = Sse41.Blend(m3.AsUInt16(), m1.AsUInt16(), 0b_00_00_11_00).AsUInt32();
			t2 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_00_00_11_11).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_11_01_00_10);
<#+
			break;
		case 21:
#>
			t0 = Sse2.UnpackLow(m2, m0);
			t1 = Sse41.Blend(t0.AsUInt16(), m0.AsUInt16(), 0b_11_11_00_00).AsUInt32();
			t2 = Sse2.ShiftLeftLogical128BitLane(m3, 8);
			b0 = Sse41.Blend(t1.AsUInt16(), t2.AsUInt16(), 0b_11_00_00_00).AsUInt32();
<#+
			break;
		case 22:
#>
			t0 = Sse41.Blend(m0.AsUInt16(), m2.AsUInt16(), 0b_00_11_11_00).AsUInt32();
			t1 = Sse2.ShiftRightLogical128BitLane(m1, 12);
			t2 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_00_00_00_11).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_00_11_10_01);
<#+
			break;
		case 23:
#>
			t0 = Sse2.ShiftLeftLogical128BitLane(m3, 4);
			t1 = Sse41.Blend(m0.AsUInt16(), m1.AsUInt16(), 0b_00_11_00_11).AsUInt32();
			t2 = Sse41.Blend(t1.AsUInt16(), t0.AsUInt16(), 0b_11_00_00_00).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_01_10_11_00);
<#+
			break;
		case 30:
#>
			t0 = Sse2.UnpackHigh(m0, m1);
			t1 = Sse2.UnpackHigh(t0, m2);
			t2 = Sse41.Blend(t1.AsUInt16(), m3.AsUInt16(), 0b_00_00_11_00).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_11_01_00_10);
<#+
			break;
		case 31:
#>
			t0 = Sse2.ShiftLeftLogical128BitLane(m2, 8);
			t1 = Sse41.Blend(m3.AsUInt16(), m0.AsUInt16(), 0b_00_00_11_00).AsUInt32();
			t2 = Sse41.Blend(t1.AsUInt16(), t0.AsUInt16(), 0b_11_00_00_00).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_10_00_01_11);
<#+
			break;
		case 32:
#>
			t0 = Sse41.Blend(m0.AsUInt16(), m1.AsUInt16(), 0b_00_00_11_11).AsUInt32();
			t1 = Sse41.Blend(t0.AsUInt16(), m3.AsUInt16(), 0b_11_00_00_00).AsUInt32();
			b0 = Sse2.Shuffle(t1, 0b_00_01_10_11);
<#+
			break;
		case 33:
#>
			t0 = Ssse3.AlignRight(m0, m1, 4);
			b0 = Sse41.Blend(t0.AsUInt16(), m2.AsUInt16(), 0b_00_11_00_11).AsUInt32();
<#+
			break;
		case 40:
#>
			t0 = Sse2.UnpackLow(m1.AsUInt64(), m2.AsUInt64()).AsUInt32();
			t1 = Sse2.UnpackHigh(m0.AsUInt64(), m2.AsUInt64()).AsUInt32();
			t2 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_00_11_00_11).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_10_00_01_11);
<#+
			break;
		case 41:
#>
			t0 = Sse2.UnpackHigh(m1.AsUInt64(), m3.AsUInt64()).AsUInt32();
			t1 = Sse2.UnpackLow(m0.AsUInt64(), m1.AsUInt64()).AsUInt32();
			b0 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_00_11_00_11).AsUInt32();
<#+
			break;
		case 42:
#>
			t0 = Sse2.UnpackHigh(m3.AsUInt64(), m1.AsUInt64()).AsUInt32();
			t1 = Sse2.UnpackHigh(m2.AsUInt64(), m0.AsUInt64()).AsUInt32();
			t2 = Sse41.Blend(t1.AsUInt16(), t0.AsUInt16(), 0b_00_11_00_11).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_10_01_00_11);
<#+
			break;
		case 43:
#>
			t0 = Sse41.Blend(m0.AsUInt16(), m2.AsUInt16(), 0b_00_00_00_11).AsUInt32();
			t1 = Sse2.ShiftLeftLogical128BitLane(t0, 8);
			t2 = Sse41.Blend(t1.AsUInt16(), m3.AsUInt16(), 0b_00_00_11_11).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_10_00_11_01);
<#+
			break;
		case 50:
#>
			t0 = Sse2.UnpackHigh(m0, m1);
			t1 = Sse2.UnpackLow(m0, m2);
			b0 = Sse2.UnpackLow(t0.AsUInt64(), t1.AsUInt64()).AsUInt32();
<#+
			break;
		case 51:
#>
			t0 = Sse2.ShiftRightLogical128BitLane(m2, 4);
			t1 = Sse41.Blend(m0.AsUInt16(), m3.AsUInt16(), 0b_00_00_00_11).AsUInt32();
			b0 = Sse41.Blend(t1.AsUInt16(), t0.AsUInt16(), 0b_00_11_11_00).AsUInt32();
<#+
			break;
		case 52:
#>
			t0 = Sse41.Blend(m1.AsUInt16(), m0.AsUInt16(), 0b_00_00_11_00).AsUInt32();
			t1 = Sse2.ShiftRightLogical128BitLane(m3, 4);
			t2 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_00_11_00_00).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_10_11_00_01);
<#+
			break;
		case 53:
#>
			t0 = Sse2.UnpackLow(m2.AsUInt64(), m1.AsUInt64()).AsUInt32();
			t1 = Sse2.Shuffle(m3, 0b_10_00_01_00);
			t2 = Sse2.ShiftRightLogical128BitLane(t0, 4);
			b0 = Sse41.Blend(t1.AsUInt16(), t2.AsUInt16(), 0b_00_11_00_11).AsUInt32();
<#+
			break;
		case 60:
#>
			t0 = Sse2.ShiftLeftLogical128BitLane(m1, 12);
			t1 = Sse41.Blend(m0.AsUInt16(), m3.AsUInt16(), 0b_00_11_00_11).AsUInt32();
			b0 = Sse41.Blend(t1.AsUInt16(), t0.AsUInt16(), 0b_11_00_00_00).AsUInt32();
<#+
			break;
		case 61:
#>
			t0 = Sse41.Blend(m3.AsUInt16(), m2.AsUInt16(), 0b_00_11_00_00).AsUInt32();
			t1 = Sse2.ShiftRightLogical128BitLane(m1, 4);
			t2 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_00_00_00_11).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_10_01_11_00);
<#+
			break;
		case 62:
#>
			t0 = Sse2.UnpackLow(m0.AsUInt64(), m2.AsUInt64()).AsUInt32();
			t1 = Sse2.ShiftRightLogical128BitLane(m1, 4);
			t2 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_00_00_11_00).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_11_01_00_10);
<#+
			break;
		case 63:
#>
			t0 = Sse2.UnpackHigh(m1, m2);
			t1 = Sse2.UnpackHigh(m0.AsUInt64(), t0.AsUInt64()).AsUInt32();
			b0 = Sse2.Shuffle(t1, 0b_00_01_10_11);
<#+
			break;
		case 70:
#>
			t0 = Sse2.UnpackHigh(m0, m1);
			t1 = Sse41.Blend(t0.AsUInt16(), m3.AsUInt16(), 0b_00_00_11_11).AsUInt32();
			b0 = Sse2.Shuffle(t1, 0b_10_00_11_01);
<#+
			break;
		case 71:
#>
			t0 = Sse41.Blend(m2.AsUInt16(), m3.AsUInt16(), 0b_00_11_00_00).AsUInt32();
			t1 = Sse2.ShiftRightLogical128BitLane(m0, 4);
			t2 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_00_00_00_11).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_01_00_10_11);
<#+
			break;
		case 72:
#>
			t0 = Sse2.UnpackHigh(m0.AsUInt64(), m3.AsUInt64()).AsUInt32();
			t1 = Sse2.UnpackLow(m1.AsUInt64(), m2.AsUInt64()).AsUInt32();
			t2 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_00_11_11_00).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_10_11_01_00);
<#+
			break;
		case 73:
#>
			t0 = Sse2.UnpackLow(m0, m1);
			t1 = Sse2.UnpackHigh(m1, m2);
			t2 = Sse2.UnpackLow(t0.AsUInt64(), t1.AsUInt64()).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_10_01_00_11);
<#+
			break;
		case 80:
#>
			t0 = Sse2.UnpackHigh(m1, m3);
			t1 = Sse2.UnpackLow(t0.AsUInt64(), m0.AsUInt64()).AsUInt32();
			t2 = Sse41.Blend(t1.AsUInt16(), m2.AsUInt16(), 0b_11_00_00_00).AsUInt32();
			b0 = Sse2.ShuffleHigh(t2.AsUInt16(), 0b_01_00_11_10).AsUInt32();
<#+
			break;
		case 81:
#>
			t0 = Sse2.UnpackHigh(m0, m3);
			t1 = Sse41.Blend(m2.AsUInt16(), t0.AsUInt16(), 0b_11_11_00_00).AsUInt32();
			b0 = Sse2.Shuffle(t1, 0b_00_10_01_11);
<#+
			break;
		case 82:
#>
			t0 = Sse2.UnpackLow(m0.AsUInt64(), m3.AsUInt64()).AsUInt32();
			t1 = Sse2.ShiftRightLogical128BitLane(m2, 8);
			t2 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_00_00_00_11).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_01_11_10_00);
<#+
			break;
		case 83:
#>
			t0 = Sse41.Blend(m1.AsUInt16(), m0.AsUInt16(), 0b_00_11_00_00).AsUInt32();
			b0 = Sse2.Shuffle(t0, 0b_00_11_10_01);
<#+
			break;
		case 90:
#>
			t0 = Sse41.Blend(m0.AsUInt16(), m2.AsUInt16(), 0b_00_00_00_11).AsUInt32();
			t1 = Sse41.Blend(m1.AsUInt16(), m2.AsUInt16(), 0b_00_11_00_00).AsUInt32();
			t2 = Sse41.Blend(t1.AsUInt16(), t0.AsUInt16(), 0b_00_00_11_11).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_01_11_00_10);
<#+
			break;
		case 91:
#>
			t0 = Sse2.ShiftLeftLogical128BitLane(m0, 4);
			t1 = Sse41.Blend(m1.AsUInt16(), t0.AsUInt16(), 0b_11_00_00_00).AsUInt32();
			b0 = Sse2.Shuffle(t1, 0b_01_10_00_11);
<#+
			break;
		case 92:
#>
			t0 = Sse2.UnpackHigh(m0, m3);
			t1 = Sse2.UnpackLow(m2, m3);
			t2 = Sse2.UnpackHigh(t0.AsUInt64(), t1.AsUInt64()).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_00_10_01_11);
<#+
			break;
		case 93:
#>
			t0 = Sse41.Blend(m3.AsUInt16(), m2.AsUInt16(), 0b_11_00_00_00).AsUInt32();
			t1 = Sse2.UnpackLow(m0, m3);
			t2 = Sse41.Blend(t0.AsUInt16(), t1.AsUInt16(), 0b_00_00_11_11).AsUInt32();
			b0 = Sse2.Shuffle(t2, 0b_01_10_11_00);
<#+
			break;
	}
}
#>