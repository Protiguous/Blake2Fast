// Copyright © Clinton Ingram and Contributors.  Licensed under the MIT License.

//------------------------------------------------------------------------------
//	<auto-generated>
//		This code was generated from a template.
//		Manual changes will be overwritten if the code is regenerated.
//	</auto-generated>
//------------------------------------------------------------------------------

#if HWINTRINSICS && NET8_0_OR_GREATER
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Blake2Fast.Implementation;

#if BLAKE2_PUBLIC
public
#else
internal
#endif
unsafe partial struct Blake2sHashState
{
	// SIMD algorithm described in https://eprint.iacr.org/2012/275.pdf
	[MethodImpl(MethodImplOptions.AggressiveOptimization)]
	private static void mixAvx512(uint* sh, uint* m)
	{
		// This nonsense breaks CSE of these reads, tricking JIT into allocating low regsiters to the row vars.
		nuint zero = Sse2.CompareGreaterThan(Vector128<int>.Zero, Vector128<int>.Zero).AsUInt32().ToScalar();
		uint* piv = (uint*)Unsafe.AsPointer(ref MemoryMarshal.GetReference(ivle)) + zero;
		var row3 = Sse2.LoadVector128(piv);
		var row4 = Sse2.LoadVector128(piv + Vector128<uint>.Count);

		// Again breaking CSE, otherwise JIT wastes good registers caching these reads that aren't used again until the end.
		var row1 = Sse2.LoadVector128(sh + zero);
		var row2 = Sse2.LoadVector128(sh + zero + Vector128<uint>.Count);

		row4 = Sse2.Xor(row4, Sse2.LoadVector128(sh + Vector128<uint>.Count * 2)); // t[] and f[]

		var m0 = Sse2.LoadVector128(m);
		var m1 = Sse2.LoadVector128(m + Vector128<uint>.Count);
		var m2 = Sse2.LoadVector128(m + Vector128<uint>.Count * 2);
		var m3 = Sse2.LoadVector128(m + Vector128<uint>.Count * 3);

		//ROUND 1
		var b0 = Sse.Shuffle(m0.AsSingle(), m1.AsSingle(), 0b_10_00_10_00).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		b0 = Sse.Shuffle(m0.AsSingle(), m1.AsSingle(), 0b_11_01_11_01).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//DIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_10_01_00_11);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_00_11_10_01);

		var t0 = Ssse3.AlignRight(m2, m3, 8);
		var t1 = Ssse3.AlignRight(m3, m2, 8);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_10_00_10_00).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_11_01_11_01).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//UNDIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_00_11_10_01);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_10_01_00_11);

		//ROUND 2
		t0 = Ssse3.AlignRight(m1, m3, 8);
		b0 = Sse.Shuffle(t0.AsSingle(), b0.AsSingle(), 0b_11_01_10_00).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Ssse3.AlignRight(m1, m3, 12);
		b0 = Sse.Shuffle(m2.AsSingle(), t0.AsSingle(), 0b_11_00_00_10).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//DIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_10_01_00_11);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_00_11_10_01);

		t0 = Sse2.UnpackLow(m1, m0);
		t1 = Ssse3.AlignRight(m0, m2, 12);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_00_01_11_10).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Ssse3.AlignRight(m3, m0, 12);
		t1 = Sse2.UnpackHigh(m0, m1);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_11_00_01_00).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//UNDIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_00_11_10_01);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_10_01_00_11);

		//ROUND 3
		t0 = Ssse3.AlignRight(m3, m2, 12);
		t1 = Ssse3.AlignRight(m1, m3, 12);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_00_10_01_00).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Sse2.UnpackLow(m2, m0);
		t1 = Ssse3.AlignRight(m3, m0, 8);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_11_00_01_00).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//DIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_10_01_00_11);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_00_11_10_01);

		t0 = Sse2.UnpackHigh(m0, m1);
		b0 = Sse.Shuffle(m2.AsSingle(), t0.AsSingle(), 0b_11_10_10_01).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Ssse3.AlignRight(m1, m3, 8);
		t1 = Ssse3.AlignRight(m0, m1, 8);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_11_00_00_10).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//UNDIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_00_11_10_01);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_10_01_00_11);

		//ROUND 4
		t0 = Sse2.UnpackHigh(m0, m1);
		t1 = Ssse3.AlignRight(m3, m2, 12);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_00_10_10_11).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Sse2.UnpackLow(m2, m0);
		b0 = Sse.Shuffle(t0.AsSingle(), m3.AsSingle(), 0b_10_00_11_10).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//DIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_10_01_00_11);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_00_11_10_01);

		t0 = Ssse3.AlignRight(m0, m3, 12);
		b0 = Sse.Shuffle(t0.AsSingle(), m1.AsSingle(), 0b_00_01_11_00).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Ssse3.AlignRight(m2, m1, 8);
		t1 = Ssse3.AlignRight(m0, m2, 8);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_10_00_00_10).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//UNDIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_00_11_10_01);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_10_01_00_11);

		//ROUND 5
		t0 = Sse2.UnpackLow(m2, m1);
		t1 = Sse2.UnpackHigh(m0, m2);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_01_00_11_10).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Ssse3.AlignRight(m0, m1, 12);
		t1 = Ssse3.AlignRight(m1, m3, 12);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_00_01_00_01).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//DIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_10_01_00_11);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_00_11_10_01);

		t0 = Sse2.UnpackHigh(m0, m3);
		t1 = Sse2.UnpackHigh(m2, m1);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_01_10_01_10).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Sse2.UnpackLow(m0, m3);
		t1 = Sse2.UnpackLow(m3, m2);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_01_00_10_11).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//UNDIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_00_11_10_01);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_10_01_00_11);

		//ROUND 6
		t0 = Sse2.UnpackHigh(m0, m1);
		t1 = Sse2.UnpackLow(m2, m0);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_00_01_01_00).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Ssse3.AlignRight(m3, m2, 8);
		t1 = Sse2.UnpackHigh(m0, m2);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_10_11_00_10).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//DIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_10_01_00_11);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_00_11_10_01);

		t0 = Sse2.UnpackLow(m1, m0);
		t1 = Sse2.UnpackHigh(m1, m3);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_11_10_00_11).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Sse2.UnpackLow(m3, m2);
		t1 = Ssse3.AlignRight(m1, m3, 8);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_00_11_10_11).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//UNDIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_00_11_10_01);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_10_01_00_11);

		//ROUND 7
		t0 = Sse2.UnpackLow(m0, m3);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_10_00_10_01).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Ssse3.AlignRight(m3, m2, 8);
		b0 = Sse.Shuffle(t1.AsSingle(), t0.AsSingle(), 0b_00_11_01_11).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//DIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_10_01_00_11);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_00_11_10_01);

		t0 = Sse2.UnpackLow(m2, m0);
		t1 = Ssse3.AlignRight(m2, m1, 8);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_11_00_01_00).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Sse2.UnpackHigh(m2, m1);
		b0 = Sse.Shuffle(t0.AsSingle(), m0.AsSingle(), 0b_10_11_11_10).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//UNDIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_00_11_10_01);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_10_01_00_11);

		//ROUND 8
		t0 = Ssse3.AlignRight(m3, m1, 12);
		t1 = Ssse3.AlignRight(m3, m0, 12);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_00_01_00_10).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Sse2.UnpackHigh(m2, m3);
		t1 = Sse2.UnpackLow(m2, m0);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_10_11_01_10).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//DIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_10_01_00_11);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_00_11_10_01);

		t0 = Ssse3.AlignRight(m1, m0, 8);
		t1 = Ssse3.AlignRight(m2, m3, 8);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_10_01_11_00).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Ssse3.AlignRight(m0, m2, 8);
		b0 = Sse.Shuffle(t0.AsSingle(), m1.AsSingle(), 0b_10_00_10_00).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//UNDIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_00_11_10_01);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_10_01_00_11);

		//ROUND 9
		t1 = Sse2.UnpackHigh(m1, m3);
		b0 = Sse.Shuffle(t1.AsSingle(), t0.AsSingle(), 0b_10_01_01_00).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Ssse3.AlignRight(m2, m3, 8);
		t1 = Ssse3.AlignRight(m2, m0, 8);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_10_01_11_01).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//DIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_10_01_00_11);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_00_11_10_01);

		t0 = Ssse3.AlignRight(m3, m2, 8);
		t1 = Sse2.UnpackLow(m0, m3);
		b0 = Sse.Shuffle(t0.AsSingle(), t1.AsSingle(), 0b_10_11_10_00).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Ssse3.AlignRight(m1, m0, 8);
		b0 = Sse.Shuffle(t0.AsSingle(), m1.AsSingle(), 0b_00_11_00_11).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//UNDIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_00_11_10_01);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_10_01_00_11);

		//ROUND 10
		t1 = Ssse3.AlignRight(m0, m1, 12);
		b0 = Sse.Shuffle(m2.AsSingle(), t1.AsSingle(), 0b_10_00_00_10).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		b0 = Sse.Shuffle(t0.AsSingle(), m1.AsSingle(), 0b_01_10_10_00).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//DIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_10_01_00_11);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_00_11_10_01);

		t0 = Ssse3.AlignRight(m2, m0, 8);
		b0 = Sse.Shuffle(m3.AsSingle(), t0.AsSingle(), 0b_01_11_11_01).AsUInt32();

		//G1
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 16);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 12);

		t0 = Ssse3.AlignRight(m0, m2, 8);
		b0 = Sse.Shuffle(t0.AsSingle(), m3.AsSingle(), 0b_00_10_01_10).AsUInt32();

		//G2
		row1 = Sse2.Add(Sse2.Add(row1, b0), row2);
		row4 = Avx512F.VL.RotateRight(Sse2.Xor(row4, row1), 8);

		row3 = Sse2.Add(row3, row4);
		row2 = Avx512F.VL.RotateRight(Sse2.Xor(row2, row3), 7);

		//UNDIAGONALIZE
		row1 = Sse2.Shuffle(row1, 0b_00_11_10_01);
		row4 = Sse2.Shuffle(row4, 0b_01_00_11_10);
		row3 = Sse2.Shuffle(row3, 0b_10_01_00_11);

		row1 = Sse2.Xor(row1, row3);
		row2 = Sse2.Xor(row2, row4);
		row1 = Sse2.Xor(row1, Sse2.LoadVector128(sh));
		row2 = Sse2.Xor(row2, Sse2.LoadVector128(sh + Vector128<uint>.Count));
		Sse2.Store(sh, row1);
		Sse2.Store(sh + Vector128<uint>.Count, row2);
	}
}
#endif
